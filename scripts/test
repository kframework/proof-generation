#!/usr/bin/env bash

set -euo pipefail

# Dependencies
# ============

build-metamath() {
    (   git submodule update --init --recursive deps/metamath-exe/
        cd deps/metamath-exe/src
        gcc m*.c -o metamath
    )
    PATH="$(pwd)/deps/metamath-exe/src:$PATH"
}

# Tests
# =====

static-checks() {
    yapf --recursive --diff ml scripts tests
    mypy --strict --no-incremental ml scripts tests
}

unit-tests() {
    pytest "$@" --ignore=deps
}

metamath-verify() {
    # Modified from https://github.com/metamath/set.mm/blob/develop/scripts/verify
    # We should find a cleaner way of doing this long term.
    mmfile=$1; shift
    log_file=.build/${mmfile}.log
    echo "Checking '$mmfile'"
    mkdir -p $(dirname "$log_file")
    metamath > "$log_file" << COMMANDS
set echo on
set scroll continuous
read '${mmfile}'
verify proof *
quit
COMMANDS
    # Get status, which is false (nonzero) if an error or warning was found.
    ! grep -E '[?]Error|[?]Warning' < "$log_file" > /dev/null || {
        echo "FAILED. See: $log_file";
        return 1;
    }
}

metamath-verify-all() {
    for f in "$@"; do
        metamath-verify "$f"
    done
}

extract-lemma-tests() {
    input_mm=$1; shift
    thm_label=$1; shift
    output_mm=$1; shift
    python -m scripts.extract_lemma "$input_mm" "$thm_label" "$output_mm"
    # metamath-verify "$output_mm"
}

static-checks
unit-tests
build-metamath
metamath-verify-all theory/matching-logic*.mm theory/prelude.mm
extract-lemma-tests theory/prelude.mm imp-reflexivity .build/imp-reflexivity-extracted.mm

